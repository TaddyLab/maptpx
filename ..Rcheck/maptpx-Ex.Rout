
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "maptpx"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "maptpx-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('maptpx')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("counts")
> ### * counts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: counts
> ### Title: Utilities for count matrices
> ### Aliases: stm_tfidf normalizetpx
> 
> ### ** Examples
> 
> normalizetpx( matrix(1:9, ncol=3) )
           [,1]      [,2]      [,3]
[1,] 0.08333333 0.3333333 0.5833333
[2,] 0.13333333 0.3333333 0.5333333
[3,] 0.16666667 0.3333333 0.5000000
> normalizetpx( matrix(1:9, ncol=3), byrow=FALSE )
          [,1]      [,2]      [,3]
[1,] 0.1666667 0.2666667 0.2916667
[2,] 0.3333333 0.3333333 0.3333333
[3,] 0.5000000 0.4000000 0.3750000
> 
> (x <- matrix(rbinom(15,size=2,prob=.25),ncol=3))
     [,1] [,2] [,3]
[1,]    0    1    0
[2,]    0    2    0
[3,]    1    1    1
[4,]    1    1    0
[5,]    0    0    1
> stm_tfidf(x)
          [,1] [,2]      [,3]
[1,] 0.0000000    0 0.0000000
[2,] 0.0000000    0 0.0000000
[3,] 0.5108256    0 0.5108256
[4,] 0.5108256    0 0.0000000
[5,] 0.0000000    0 0.5108256
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("counts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("predict.topics")
> ### * predict.topics
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: predict.topics
> ### Title: topic predict
> ### Aliases: predict.topics
> 
> ### ** Examples
> 
> 
> ## Simulate some data
> omega <- t(rdir(500, rep(1/10,10)))
> theta <- rdir(10, rep(1/1000,1000))
> Q <- omega%*%t(theta)
> counts <- matrix(ncol=1000, nrow=500)
> totals <- rpois(500, 200)
> for(i in 1:500){ counts[i,] <- rmultinom(1, size=totals[i], prob=Q[i,]) }
> 
> ## predict omega given theta
> W <- predict.topics( theta, counts )
> plot(W, omega, pch=21, bg=8)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("predict.topics", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rdir")
> ### * rdir
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rdir
> ### Title: Dirichlet RNG
> ### Aliases: rdir
> 
> ### ** Examples
> 
> rdir(3,rep(1,6))
          [,1]       [,2]       [,3]
[1,] 0.0219774 0.42512912 0.01252093
[2,] 0.2666619 0.13199062 0.22936809
[3,] 0.2556281 0.04063083 0.18509134
[4,] 0.1184533 0.06750465 0.24986738
[5,] 0.1731861 0.13346440 0.22141755
[6,] 0.1640932 0.20128037 0.10173472
>  
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rdir", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("topics")
> ### * topics
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: topics
> ### Title: Estimation for Topic Models
> ### Aliases: topics
> 
> ### ** Examples
> 
> ## see also http://faculty.chicagobooth.edu/matt.taddy/teaching/we8there.R
> 
> ## Simulation Parameters
> K <- 10
> n <- 100
> p <- 100
> omega <- t(rdir(n, rep(1/K,K)))
> theta <- rdir(K, rep(1/p,p))
> 
> ## Simulated counts
> Q <- omega%*%t(theta)
> counts <- matrix(ncol=p, nrow=n)
> totals <- rpois(n, 100)
> for(i in 1:n){ counts[i,] <- rmultinom(1, size=totals[i], prob=Q[i,]) }
> 
> ## Bayes Factor model selection (should choose K or nearby)
> summary(simselect <- topics(counts, K=K+c(-5:5)), nwrd=0)

Estimating on a 100 document collection.
Fit and Bayes Factor Estimation for K = 5 ... 15
log posterior increase: 5704.8, 8.5, 4.4, 0.4, done.
log BF( 5 ) = 7396.07
Warning in 1:K :
  numerical expression has 11 elements: only the first used
Warning in 1:K :
  numerical expression has 11 elements: only the first used
Warning in 1:K :
  numerical expression has 11 elements: only the first used

Log Bayes factor and estimated dispersion, by number of topics:

            5
logBF 7396.07
Disp     3.96

Selected the K = 5 topic model

 
Selected the K = 6 topic model

 
Selected the K = 7 topic model

 
Selected the K = 8 topic model

 
Selected the K = 9 topic model

 
Selected the K = 10 topic model

 
Selected the K = 11 topic model

 
Selected the K = 12 topic model

 
Selected the K = 13 topic model

 
Selected the K = 14 topic model

 
Selected the K = 15 topic model

> 
> ## MAP fit for given K
> summary( simfit <- topics(counts,  K=K, verb=2), n=0 )

Estimating on a 100 document collection.
Warning in matrix(1:(n - n%%Kdiff), ncol = Kdiff) :
  data length [2] is not a sub-multiple or multiple of the number of columns [9]
Fitting the 10 topic model.
log posterior increase: 10817.3, 641.8, 65.1, 1.1, 0.9, 0.3, 0.3, 0.2, done. (L = -17617)

Dispersion = 2.75

> 
> ## Adjust for label switching and plot the fit (color by topic)
> toplab <- rep(0,K)
> for(k in 1:K){ toplab[k] <- which.min(colSums(abs(simfit$theta-theta[,k]))) }
> par(mfrow=c(1,2))
> tpxcols <- matrix(rainbow(K), ncol=ncol(theta), byrow=TRUE)
> plot(theta,simfit$theta[,toplab], ylab="fitted values", pch=21, bg=tpxcols)
> plot(omega,simfit$omega[,toplab], ylab="fitted values", pch=21, bg=tpxcols)
> title("True vs Fitted Values (color by topic)", outer=TRUE, line=-2)
> 
> ## The S3 method plot functions
> par(mfrow=c(1,2))
> plot(simfit, lgd.K=2)
> plot(simfit, type="resid")
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("topics", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.81 0.056 0.788 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
